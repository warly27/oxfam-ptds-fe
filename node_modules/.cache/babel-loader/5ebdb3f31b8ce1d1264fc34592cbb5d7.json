{"ast":null,"code":"import _regeneratorRuntime from\"/Users/wdelacruz/project_2021/matx-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/wdelacruz/project_2021/matx-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import jwt from'jsonwebtoken';import Mock from'../mock';var JWT_SECRET='jwt_secret_key';var JWT_VALIDITY='7 days';var userList=[{id:1,role:'SA',name:'Warly',username:'warly@OxFam',email:'warly.delacruz@oxfam.com',avatar:'/assets/images/warmark.png',age:25}];// FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\n// YOU NEED TO BUILD YOUR OWN SERVER\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\n// CONTACT US AT support@ui-lib.com\nMock.onPost('/api/auth/login').reply(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(config){var _JSON$parse,email,user,accessToken;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return new Promise(function(resolve){return setTimeout(resolve,1000);});case 3:console.log(config.data);_JSON$parse=JSON.parse(config.data),email=_JSON$parse.email;user=userList.find(function(u){return u.email===email;});console.log(!user);if(user){_context.next=9;break;}return _context.abrupt(\"return\",[400,{message:'Invalid email or password'}]);case 9:accessToken=jwt.sign({userId:user.id},JWT_SECRET,{expiresIn:JWT_VALIDITY});console.log(accessToken);return _context.abrupt(\"return\",[200,{accessToken:accessToken,user:{id:user.id,avatar:user.avatar,email:user.email,name:user.name,role:user.role}}]);case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);console.error(_context.t0);return _context.abrupt(\"return\",[500,{message:'Internal server error'}]);case 18:case\"end\":return _context.stop();}}},_callee,null,[[0,14]]);}));return function(_x){return _ref.apply(this,arguments);};}());Mock.onPost('/api/auth/register').reply(function(config){try{var _JSON$parse2=JSON.parse(config.data),email=_JSON$parse2.email,username=_JSON$parse2.username;var user=userList.find(function(u){return u.email===email;});if(user){return[400,{message:'User already exists!'}];}var newUser={id:2,role:'GUEST',name:'',username:username,email:email,avatar:'/assets/images/face-6.jpg',age:25};userList.push(newUser);var accessToken=jwt.sign({userId:newUser.id},JWT_SECRET,{expiresIn:JWT_VALIDITY});return[200,{accessToken:accessToken,user:{id:newUser.id,avatar:newUser.avatar,email:newUser.email,name:newUser.name,username:newUser.username,role:newUser.role}}];}catch(err){console.error(err);return[500,{message:'Internal server error'}];}});Mock.onGet('/api/auth/profile').reply(function(config){try{var Authorization=config.headers.Authorization;if(!Authorization){return[401,{message:'Invalid Authorization token'}];}var accessToken=Authorization.split(' ')[1];var _jwt$verify=jwt.verify(accessToken,JWT_SECRET),userId=_jwt$verify.userId;var user=userList.find(function(u){return u.id===userId;});if(!user){return[401,{message:'Invalid authorization token'}];}return[200,{user:{id:user.id,avatar:user.avatar,email:user.email,name:user.name,role:user.role}}];}catch(err){console.error(err);return[500,{message:'Internal server error'}];}});","map":null,"metadata":{},"sourceType":"module"}