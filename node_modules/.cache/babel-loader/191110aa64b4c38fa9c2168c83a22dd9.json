{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nvar ptBRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mês anterior',\n  nextMonth: 'Próximo mês',\n  // View navigation\n  openPreviousView: 'Abrir próxima seleção',\n  openNextView: 'Abrir seleção anterior',\n  calendarViewSwitchingButtonAriaLabel: function calendarViewSwitchingButtonAriaLabel(view) {\n    return view === 'year' ? 'Seleção de ano está aberta, alternando para seleção de calendário' : 'Seleção de calendários está aberta, alternando para seleção de ano';\n  },\n  // DateRange placeholders\n  start: 'Início',\n  end: 'Fim',\n  // Action bar\n  cancelButtonLabel: 'Cancelar',\n  clearButtonLabel: 'Limpar',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Hoje',\n  // Clock labels\n  clockLabelText: function clockLabelText(view, time, adapter) {\n    return \"Selecione \".concat(view, \". \").concat(time === null ? 'Hora não selecionada' : \"Selecionado a hora \".concat(adapter.format(time, 'fullTime')));\n  },\n  hoursClockNumberText: function hoursClockNumberText(hours) {\n    return \"\".concat(hours, \" horas\");\n  },\n  minutesClockNumberText: function minutesClockNumberText(minutes) {\n    return \"\".concat(minutes, \" minutos\");\n  },\n  secondsClockNumberText: function secondsClockNumberText(seconds) {\n    return \"\".concat(seconds, \" segundos\");\n  },\n  // Open picker labels\n  openDatePickerDialogue: function openDatePickerDialogue(rawValue, utils) {\n    return rawValue && utils.isValid(utils.date(rawValue)) ? \"Escolha uma data, data selecionada \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Escolha uma data';\n  },\n  openTimePickerDialogue: function openTimePickerDialogue(rawValue, utils) {\n    return rawValue && utils.isValid(utils.date(rawValue)) ? \"Escolha uma hora, hora selecionada \".concat(utils.format(utils.date(rawValue), 'fullTime')) : 'Escolha uma hora';\n  },\n  // Table labels\n  timeTableLabel: 'escolha uma hora',\n  dateTableLabel: 'escolha uma data'\n};\nexport var ptBR = getPickersLocalization(ptBRPickers);","map":{"version":3,"names":["getPickersLocalization","ptBRPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","format","hoursClockNumberText","hours","minutesClockNumberText","minutes","secondsClockNumberText","seconds","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","ptBR"],"sources":["/Users/wdelacruz/project_2021/matx-react/node_modules/@mui/x-date-pickers/locales/ptBR.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst ptBRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mês anterior',\n  nextMonth: 'Próximo mês',\n  // View navigation\n  openPreviousView: 'Abrir próxima seleção',\n  openNextView: 'Abrir seleção anterior',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Seleção de ano está aberta, alternando para seleção de calendário' : 'Seleção de calendários está aberta, alternando para seleção de ano',\n  // DateRange placeholders\n  start: 'Início',\n  end: 'Fim',\n  // Action bar\n  cancelButtonLabel: 'Cancelar',\n  clearButtonLabel: 'Limpar',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Hoje',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Selecione ${view}. ${time === null ? 'Hora não selecionada' : `Selecionado a hora ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} horas`,\n  minutesClockNumberText: minutes => `${minutes} minutos`,\n  secondsClockNumberText: seconds => `${seconds} segundos`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma data, data selecionada ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Escolha uma data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma hora, hora selecionada ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Escolha uma hora',\n  // Table labels\n  timeTableLabel: 'escolha uma hora',\n  dateTableLabel: 'escolha uma data'\n};\nexport const ptBR = getPickersLocalization(ptBRPickers);"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC;AACA,IAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,cAFG;EAGlBC,SAAS,EAAE,aAHO;EAIlB;EACAC,gBAAgB,EAAE,uBALA;EAMlBC,YAAY,EAAE,wBANI;EAOlBC,oCAAoC,EAAE,8CAAAC,IAAI;IAAA,OAAIA,IAAI,KAAK,MAAT,GAAkB,mEAAlB,GAAwF,oEAA5F;EAAA,CAPxB;EAQlB;EACAC,KAAK,EAAE,QATW;EAUlBC,GAAG,EAAE,KAVa;EAWlB;EACAC,iBAAiB,EAAE,UAZD;EAalBC,gBAAgB,EAAE,QAbA;EAclBC,aAAa,EAAE,IAdG;EAelBC,gBAAgB,EAAE,MAfA;EAgBlB;EACAC,cAAc,EAAE,wBAACP,IAAD,EAAOQ,IAAP,EAAaC,OAAb;IAAA,2BAAsCT,IAAtC,eAA+CQ,IAAI,KAAK,IAAT,GAAgB,sBAAhB,gCAA+DC,OAAO,CAACC,MAAR,CAAeF,IAAf,EAAqB,UAArB,CAA/D,CAA/C;EAAA,CAjBE;EAkBlBG,oBAAoB,EAAE,8BAAAC,KAAK;IAAA,iBAAOA,KAAP;EAAA,CAlBT;EAmBlBC,sBAAsB,EAAE,gCAAAC,OAAO;IAAA,iBAAOA,OAAP;EAAA,CAnBb;EAoBlBC,sBAAsB,EAAE,gCAAAC,OAAO;IAAA,iBAAOA,OAAP;EAAA,CApBb;EAqBlB;EACAC,sBAAsB,EAAE,gCAACC,QAAD,EAAWC,KAAX;IAAA,OAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,gDAAwFC,KAAK,CAACT,MAAN,CAAaS,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAAxF,IAA2I,kBAAhK;EAAA,CAtBN;EAuBlBI,sBAAsB,EAAE,gCAACJ,QAAD,EAAWC,KAAX;IAAA,OAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,gDAAwFC,KAAK,CAACT,MAAN,CAAaS,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAAxF,IAA2I,kBAAhK;EAAA,CAvBN;EAwBlB;EACAK,cAAc,EAAE,kBAzBE;EA0BlBC,cAAc,EAAE;AA1BE,CAApB;AA4BA,OAAO,IAAMC,IAAI,GAAGhC,sBAAsB,CAACC,WAAD,CAAnC"},"metadata":{},"sourceType":"module"}