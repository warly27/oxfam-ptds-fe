{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDependencyArrayRef = void 0;\n/**\n * useEffect(\n *    ()=> { ... },\n *    [ { \"foo\": \"bar\" } ]\n * )\n * => The callback will be invoked every render.\n * because { \"foo\": \"bar\" } is a new instance every render.\n *\n * useEffect(\n *    ()=> { ... },\n *    [ getDependencyArrayRef({ \"foo\": \"bar\" }) ]\n * );\n * => The callback will only be invoked once.\n *\n * The optimization will be enabled only if obj is\n * of the form Record<string, string | number | undefined | null>\n * overwise the object is returned (the function is the identity function).\n */\n\nfunction getDependencyArrayRef(obj) {\n  if (!(obj instanceof Object) || typeof obj === \"function\") {\n    return obj;\n  }\n\n  var arr = [];\n\n  for (var key in obj) {\n    var value = obj[key];\n    var typeofValue = typeof value;\n\n    if (!(typeofValue === \"string\" || typeofValue === \"number\" && !isNaN(value) || typeofValue === \"boolean\" || value === undefined || value === null)) {\n      return obj;\n    }\n\n    arr.push(\"\".concat(key, \":\").concat(typeofValue, \"_\").concat(value));\n  }\n\n  return \"xSqLiJdLMd9s\" + arr.join(\"|\");\n}\n\nexports.getDependencyArrayRef = getDependencyArrayRef;","map":{"version":3,"names":["Object","defineProperty","exports","value","getDependencyArrayRef","obj","arr","key","typeofValue","isNaN","undefined","push","join"],"sources":["/Users/wdelacruz/project_2021/oxfam-fe/node_modules/tss-react/tools/getDependencyArrayRef.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDependencyArrayRef = void 0;\n/**\n * useEffect(\n *    ()=> { ... },\n *    [ { \"foo\": \"bar\" } ]\n * )\n * => The callback will be invoked every render.\n * because { \"foo\": \"bar\" } is a new instance every render.\n *\n * useEffect(\n *    ()=> { ... },\n *    [ getDependencyArrayRef({ \"foo\": \"bar\" }) ]\n * );\n * => The callback will only be invoked once.\n *\n * The optimization will be enabled only if obj is\n * of the form Record<string, string | number | undefined | null>\n * overwise the object is returned (the function is the identity function).\n */\nfunction getDependencyArrayRef(obj) {\n    if (!(obj instanceof Object) || typeof obj === \"function\") {\n        return obj;\n    }\n    const arr = [];\n    for (const key in obj) {\n        const value = obj[key];\n        const typeofValue = typeof value;\n        if (!(typeofValue === \"string\" ||\n            (typeofValue === \"number\" && !isNaN(value)) ||\n            typeofValue === \"boolean\" ||\n            value === undefined ||\n            value === null)) {\n            return obj;\n        }\n        arr.push(`${key}:${typeofValue}_${value}`);\n    }\n    return \"xSqLiJdLMd9s\" + arr.join(\"|\");\n}\nexports.getDependencyArrayRef = getDependencyArrayRef;\n"],"mappings":"AAAA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgC,KAAK,CAArC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,qBAAT,CAA+BC,GAA/B,EAAoC;EAChC,IAAI,EAAEA,GAAG,YAAYL,MAAjB,KAA4B,OAAOK,GAAP,KAAe,UAA/C,EAA2D;IACvD,OAAOA,GAAP;EACH;;EACD,IAAMC,GAAG,GAAG,EAAZ;;EACA,KAAK,IAAMC,GAAX,IAAkBF,GAAlB,EAAuB;IACnB,IAAMF,KAAK,GAAGE,GAAG,CAACE,GAAD,CAAjB;IACA,IAAMC,WAAW,GAAG,OAAOL,KAA3B;;IACA,IAAI,EAAEK,WAAW,KAAK,QAAhB,IACDA,WAAW,KAAK,QAAhB,IAA4B,CAACC,KAAK,CAACN,KAAD,CADjC,IAEFK,WAAW,KAAK,SAFd,IAGFL,KAAK,KAAKO,SAHR,IAIFP,KAAK,KAAK,IAJV,CAAJ,EAIqB;MACjB,OAAOE,GAAP;IACH;;IACDC,GAAG,CAACK,IAAJ,WAAYJ,GAAZ,cAAmBC,WAAnB,cAAkCL,KAAlC;EACH;;EACD,OAAO,iBAAiBG,GAAG,CAACM,IAAJ,CAAS,GAAT,CAAxB;AACH;;AACDV,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC"},"metadata":{},"sourceType":"script"}