{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/wdelacruz/project_2021/matx-react/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCssAndCx = exports.createCssAndCx = void 0;\n\nvar classnames_1 = require(\"./tools/classnames\");\n\nvar serialize_1 = require(\"@emotion/serialize\");\n\nvar utils_1 = require(\"@emotion/utils\");\n\nvar useGuaranteedMemo_1 = require(\"./tools/useGuaranteedMemo\");\n\nvar cache_1 = require(\"./cache\");\n\nvar types_1 = require(\"./types\");\n\nexports.createCssAndCx = function () {\n  function merge(registered, css, className) {\n    var registeredStyles = [];\n    var rawClassName = (0, utils_1.getRegisteredStyles)(registered, registeredStyles, className);\n\n    if (registeredStyles.length < 2) {\n      return className;\n    }\n\n    return rawClassName + css(registeredStyles);\n  }\n\n  function createCssAndCx(params) {\n    var cache = params.cache;\n\n    var css = function css() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var serialized = (0, serialize_1.serializeStyles)(args, cache.registered);\n      (0, utils_1.insertStyles)(cache, serialized, false);\n      var className = \"\".concat(cache.key, \"-\").concat(serialized.name);\n\n      scope: {\n        var arg = args[0];\n\n        if (!(0, types_1.matchCSSObject)(arg)) {\n          break scope;\n        }\n\n        increaseSpecificityToTakePrecedenceOverMediaQuerries.saveClassNameCSSObjectMapping(cache, className, arg);\n      }\n\n      return className;\n    };\n\n    var cx = function cx() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var className = (0, classnames_1.classnames)(args);\n      var feat27FixedClassnames = increaseSpecificityToTakePrecedenceOverMediaQuerries.fixClassName(cache, className, css);\n      return merge(cache.registered, css, feat27FixedClassnames); //return merge(cache.registered, css, className);\n    };\n\n    return {\n      css: css,\n      cx: cx\n    };\n  }\n\n  return {\n    createCssAndCx: createCssAndCx\n  };\n}().createCssAndCx;\n/** Will pickup the contextual cache if any */\n\n\nfunction useCssAndCx() {\n  var cache = (0, cache_1.useTssEmotionCache)();\n\n  var _ref = (0, useGuaranteedMemo_1.useGuaranteedMemo)(function () {\n    return (0, exports.createCssAndCx)({\n      cache: cache\n    });\n  }, [cache]),\n      css = _ref.css,\n      cx = _ref.cx;\n\n  return {\n    css: css,\n    cx: cx\n  };\n}\n\nexports.useCssAndCx = useCssAndCx; // https://github.com/garronej/tss-react/issues/27\n\nvar increaseSpecificityToTakePrecedenceOverMediaQuerries = function () {\n  var cssObjectMapByCache = new WeakMap();\n  return {\n    \"saveClassNameCSSObjectMapping\": function saveClassNameCSSObjectMapping(cache, className, cssObject) {\n      var cssObjectMap = cssObjectMapByCache.get(cache);\n\n      if (cssObjectMap === undefined) {\n        cssObjectMap = new Map();\n        cssObjectMapByCache.set(cache, cssObjectMap);\n      }\n\n      cssObjectMap.set(className, cssObject);\n    },\n    \"fixClassName\": function () {\n      function fix(classNameCSSObjects) {\n        var isThereAnyMediaQueriesInPreviousClasses = false;\n        return classNameCSSObjects.map(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n              className = _ref3[0],\n              cssObject = _ref3[1];\n\n          if (cssObject === undefined) {\n            return className;\n          }\n\n          var out;\n\n          if (!isThereAnyMediaQueriesInPreviousClasses) {\n            out = className;\n\n            for (var key in cssObject) {\n              if (key.startsWith(\"@media\")) {\n                isThereAnyMediaQueriesInPreviousClasses = true;\n                break;\n              }\n            }\n          } else {\n            out = {\n              \"&&\": cssObject\n            };\n          }\n\n          return out;\n        });\n      }\n\n      return function (cache, className, css) {\n        var cssObjectMap = cssObjectMapByCache.get(cache);\n        return (0, classnames_1.classnames)(fix(className.split(\" \").map(function (className) {\n          return [className, cssObjectMap === null || cssObjectMap === void 0 ? void 0 : cssObjectMap.get(className)];\n        })).map(function (classNameOrCSSObject) {\n          return typeof classNameOrCSSObject === \"string\" ? classNameOrCSSObject : css(classNameOrCSSObject);\n        }));\n      };\n    }()\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}