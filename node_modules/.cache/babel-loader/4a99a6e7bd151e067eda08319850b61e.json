{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nvar views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nvar frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: function calendarViewSwitchingButtonAriaLabel(view) {\n    return view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année';\n  },\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Clock labels\n  clockLabelText: function clockLabelText(view, time, adapter) {\n    return \"Choix des \".concat(views[view], \". \").concat(time === null ? 'Aucune heure choisie' : \"L'heure choisie est \".concat(adapter.format(time, 'fullTime')));\n  },\n  hoursClockNumberText: function hoursClockNumberText(hours) {\n    return \"\".concat(hours, \" heures\");\n  },\n  minutesClockNumberText: function minutesClockNumberText(minutes) {\n    return \"\".concat(minutes, \" minutes\");\n  },\n  secondsClockNumberText: function secondsClockNumberText(seconds) {\n    return \"\".concat(seconds, \" secondes\");\n  },\n  // Open picker labels\n  openDatePickerDialogue: function openDatePickerDialogue(rawValue, utils) {\n    return rawValue && utils.isValid(utils.date(rawValue)) ? \"Choisir la date, la date s\\xE9lectionn\\xE9e est \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Choisir la date';\n  },\n  openTimePickerDialogue: function openTimePickerDialogue(rawValue, utils) {\n    return rawValue && utils.isValid(utils.date(rawValue)) ? \"Choisir l'heure, l'heure s\\xE9lectionn\\xE9e est \".concat(utils.format(utils.date(rawValue), 'fullTime')) : \"Choisir l'heure\";\n  },\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport var frFR = getPickersLocalization(frFRPickers);","map":{"version":3,"names":["getPickersLocalization","views","hours","minutes","seconds","frFRPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","frFR"],"sources":["/Users/wdelacruz/project_2021/matx-react/node_modules/@mui/x-date-pickers/locales/frFR.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année',\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Choix des ${views[view]}. ${time === null ? 'Aucune heure choisie' : `L'heure choisie est ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} heures`,\n  minutesClockNumberText: minutes => `${minutes} minutes`,\n  secondsClockNumberText: seconds => `${seconds} secondes`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir la date, la date sélectionnée est ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choisir la date',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir l'heure, l'heure sélectionnée est ${utils.format(utils.date(rawValue), 'fullTime')}` : \"Choisir l'heure\",\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport const frFR = getPickersLocalization(frFRPickers);"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC;AACA,IAAMC,KAAK,GAAG;EACZC,KAAK,EAAE,QADK;EAEZC,OAAO,EAAE,SAFG;EAGZC,OAAO,EAAE;AAHG,CAAd;AAKA,IAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,gBAFG;EAGlBC,SAAS,EAAE,cAHO;EAIlB;EACAC,gBAAgB,EAAE,0BALA;EAMlBC,YAAY,EAAE,wBANI;EAOlBC,oCAAoC,EAAE,8CAAAC,IAAI;IAAA,OAAIA,IAAI,KAAK,MAAT,GAAkB,oDAAlB,GAAyE,oDAA7E;EAAA,CAPxB;EAQlB;EACAC,KAAK,EAAE,OATW;EAUlBC,GAAG,EAAE,KAVa;EAWlB;EACAC,iBAAiB,EAAE,SAZD;EAalBC,gBAAgB,EAAE,OAbA;EAclBC,aAAa,EAAE,IAdG;EAelBC,gBAAgB,EAAE,aAfA;EAgBlB;EACAC,cAAc,EAAE,wBAACP,IAAD,EAAOQ,IAAP,EAAaC,OAAb;IAAA,2BAAsCnB,KAAK,CAACU,IAAD,CAA3C,eAAsDQ,IAAI,KAAK,IAAT,GAAgB,sBAAhB,iCAAgEC,OAAO,CAACC,MAAR,CAAeF,IAAf,EAAqB,UAArB,CAAhE,CAAtD;EAAA,CAjBE;EAkBlBG,oBAAoB,EAAE,8BAAApB,KAAK;IAAA,iBAAOA,KAAP;EAAA,CAlBT;EAmBlBqB,sBAAsB,EAAE,gCAAApB,OAAO;IAAA,iBAAOA,OAAP;EAAA,CAnBb;EAoBlBqB,sBAAsB,EAAE,gCAAApB,OAAO;IAAA,iBAAOA,OAAP;EAAA,CApBb;EAqBlB;EACAqB,sBAAsB,EAAE,gCAACC,QAAD,EAAWC,KAAX;IAAA,OAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,6DAA+FC,KAAK,CAACN,MAAN,CAAaM,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA/F,IAAkJ,iBAAvK;EAAA,CAtBN;EAuBlBI,sBAAsB,EAAE,gCAACJ,QAAD,EAAWC,KAAX;IAAA,OAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,6DAA+FC,KAAK,CAACN,MAAN,CAAaM,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA/F,IAAkJ,iBAAvK;EAAA,CAvBN;EAwBlB;EACAK,cAAc,EAAE,kBAzBE;EA0BlBC,cAAc,EAAE;AA1BE,CAApB;AA4BA,OAAO,IAAMC,IAAI,GAAGjC,sBAAsB,CAACK,WAAD,CAAnC"},"metadata":{},"sourceType":"module"}